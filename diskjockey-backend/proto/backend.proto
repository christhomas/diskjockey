syntax = "proto3";

// Socket protocol message type IDs used in custom framing (not part of protobuf):
//   2: ReadFileRequest / ReadFileResponse
//   3: WriteFileRequest / WriteFileResponse
// These IDs are used in the daemon's socket protocol to identify message types.

package backend;
option go_package = "diskjockey-backend/proto/backend;backend";

// Message wrapper that contains the actual message and its type
message Message {
  MessageType type = 1;
  bytes payload = 2;  // Serialized message data
}

// Central enum for all message type IDs used in the socket protocol
enum MessageType {
  UNKNOWN_TYPE = 0;
  CONNECT = 1;
  LIST_DIR_REQUEST = 2;
  LIST_DIR_RESPONSE = 3;
  MOUNT_REQUEST = 4;
  MOUNT_RESPONSE = 5;
  UNMOUNT_REQUEST = 6;
  UNMOUNT_RESPONSE = 7;
  CREATE_MOUNT_REQUEST = 8;
  CREATE_MOUNT_RESPONSE = 9;
  DELETE_MOUNT_REQUEST = 10;
  DELETE_MOUNT_RESPONSE = 11;
  LIST_MOUNTS_REQUEST = 12;
  LIST_MOUNTS_RESPONSE = 13;
  LIST_DISK_TYPES_REQUEST = 14;
  LIST_DISK_TYPES_RESPONSE = 15;
  MOUNT_STATUS_UPDATE_REQUEST = 16;
  MOUNT_STATUS_UPDATE_RESPONSE = 17;
  READ_FILE_REQUEST = 18;
  READ_FILE_RESPONSE = 19;
  WRITE_FILE_REQUEST = 20;
  WRITE_FILE_RESPONSE = 21;
  STAT_REQUEST = 22;
  STAT_RESPONSE = 23;
  DELETE_FILE_REQUEST = 24;
  DELETE_FILE_RESPONSE = 25;
  SHUTDOWN_REQUEST = 99;
  SHUTDOWN_RESPONSE = 100;
}


// Handshake
message HandshakeRequest {
  string client = 1;
}
message HandshakeResponse {
  string server = 1;
}

// List Directory
message ListDirRequest {
  uint32 mount_id = 1;
  string path = 2;
}
message ListDirResponse {
  repeated FileInfo files = 1;
  string error = 2;
}

// Read File
message ReadFileRequest {
  uint32 mount_id = 1;
  string path = 2;
}

message ReadFileResponse {
  bytes data = 1;
  string error = 2;
}

// Write File
message WriteFileRequest {
  uint32 mount_id = 1;
  string path = 2;
  bytes data = 3;
}
message WriteFileResponse {
  string error = 1;
}

// Helper â†’ Backend: Initial handshake, sends helper's listening port
// Sent by any client to initiate a session with the helper
message ConnectRequest {
  enum Role {
    UNKNOWN = 0;
    APP = 1;
    BACKEND = 2;
    FILE_PROVIDER = 3;
    // Add more as needed
  }
  Role role = 1;
  // All clients MUST set the correct role; UNKNOWN will result in handshake error.
  // Add more fields as needed
}

// Response to ConnectRequest
message ConnectResponse {
  string error = 1;
  // Add more fields as needed
}


// Delete File
message DeleteFileRequest {
  uint32 mount_id = 1;
  string path = 2;
}
message DeleteFileResponse {
  string error = 1;
}

// Stat (file metadata)
message StatRequest {
  uint32 mount_id = 1;
  string path = 2;
}
message StatResponse {
  FileInfo info = 1;
  string error = 2;
}

// List available disk types
message ListDiskTypesRequest {}
message ListDiskTypesResponse {
  repeated DiskTypeInfo disk_types = 1;
  string error = 2;
}

message DiskTypeInfo {
  string name = 1;
  string description = 2;
  repeated ConfigField config_fields = 3;
}

message ConfigField {
  string name = 1;
  string type = 2;
  string description = 3;
  bool required = 4;
}

// List current mounts
message ListMountsRequest {}
message ListMountsResponse {
  repeated MountInfo mounts = 1;
  string error = 2;
}

message MountInfo {
  string name = 1;
  string disk_type = 2;
  map<string, string> config = 3;
  uint32 mount_id = 4;
}

// File metadata
message FileInfo {
  string name = 1;
  int64 size = 2;
  bool is_dir = 3;
}

// Mount/Unmount management
// --- Mount/Unmount now only activate/deactivate an existing mount by ID ---
message MountRequest {
  uint32 mount_id = 1; // ID of mount to activate
}
message MountResponse {
  string error = 1;
}

// --- Create/Delete are for DB row management ---
message CreateMountRequest {
  string name = 1;
  string disk_type = 2;
  map<string, string> config = 3;
}
message CreateMountResponse {
  uint32 mount_id = 1;
  string error = 2;
}

message DeleteMountRequest {
  uint32 mount_id = 1;
}
message DeleteMountResponse {
  string error = 1;
}
// (Old fields for reference)
// string name = 1;
// string disk_type = 2;
// map<string, string> config = 3;

message UnmountRequest {
  uint32 mount_id = 1;
}
message UnmountResponse {
  string error = 1;
}

// Shutdown backend daemon
message ShutdownRequest {
}

message ShutdownResponse {
  bool success = 1;
  string message = 2;
}

// Mount status event (for event-driven updates)
enum MountStatus {
  UNKNOWN = 0;
  MOUNTED = 1;
  UNMOUNTED = 2;
  ERROR = 3;
}
message MountStatusUpdate {
  uint32 mount_id = 1;
  MountStatus status = 2;
  string error = 3;
}
